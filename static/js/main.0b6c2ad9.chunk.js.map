{"version":3,"sources":["components/title/Title.js","components/movie-display/MovieDisplay.js","components/movie-list/MovieList.js","container/App.js","serviceWorker.js","index.js"],"names":["Title","onHandleChange","input","onHandleSubmit","Fragment","className","type","placeholder","value","onChange","onClick","MovieDisplay","title","poster","year","src","alt","height","MovieList","moviesArray","map","item","key","imdbID","Poster","Year","App","state","movies","error","event","setState","target","length","fetch","process","then","response","json","data","Search","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gTAwBeA,G,YAtBD,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,eAAgBC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,eACtC,OACE,kBAAC,IAAMC,SAAP,KACE,6BACE,2BACEC,UAAU,aACVC,KAAK,OACLC,YAAY,oBACZC,MAAON,EACPO,SAAUR,IAEZ,4BACEI,UAAU,2CACVK,QAASP,GAFX,aCGOQ,EAdM,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KACrC,OACE,kBAAC,IAAMV,SAAP,KACE,6BACE,6BACE,yBAAKW,IAAKF,EAAQG,IAAI,GAAGC,OAAO,WAElC,4BAAKL,GACL,4BAAKE,MCaEI,G,MAnBG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACnB,OACE,kBAAC,IAAMf,SAAP,KACE,yBAAKC,UAAU,kBACZc,EAAYC,KAAI,SAAAC,GACf,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAKE,OACVX,MAAOS,EAAKrB,MACZa,OAAQQ,EAAKG,OACbV,KAAMO,EAAKI,cCoCVC,E,4MA1CbC,MAAQ,CACNzB,MAAO,GACP0B,OAAQ,GACRC,MAAO,I,EAGT5B,eAAiB,SAAA6B,GACf,EAAKC,SAAS,CAAE7B,MAAO4B,EAAME,OAAOxB,S,EAGtCL,eAAiB,WAAO,IACdD,EAAU,EAAKyB,MAAfzB,MACJA,EAAM+B,OAAS,GACjBC,MAAM,6BAAD,OAA8BhC,EAA9B,mBAhBKiC,aAiBPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OACR,EAAKR,SAAS,CACZH,OAAQW,EAAKC,YAGhBC,OAAM,SAAAC,GAAG,OAAIA,KAChB,EAAKX,SAAS,CAAE7B,MAAO,MAEvB,EAAK6B,SAAS,CAAEF,MAAO,wC,uDAKzB,OACE,yBAAKxB,UAAU,OACb,4BAAQA,UAAU,cAAlB,eACA,kBAAC,EAAD,CACEH,MAAOyC,KAAKhB,MAAMzB,MAClBD,eAAgB0C,KAAK1C,eACrBE,eAAgBwC,KAAKxC,iBAEvB,kBAAC,EAAD,CAAWgB,YAAawB,KAAKhB,MAAMC,c,GArCzBgB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.0b6c2ad9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Title.css\";\nconst Title = ({ onHandleChange, input, onHandleSubmit }) => {\n  return (\n    <React.Fragment>\n      <div>\n        <input\n          className=\"f4 pa2 ma4\"\n          type=\"text\"\n          placeholder=\"Search Movie here\"\n          value={input}\n          onChange={onHandleChange}\n        />\n        <button\n          className=\"f4 pv2 ph3 grow bg-dark-green white link\"\n          onClick={onHandleSubmit}\n        >\n          Click\n        </button>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Title;\n","import React from \"react\";\n\nconst MovieDisplay = ({ title, poster, year }) => {\n  return (\n    <React.Fragment>\n      <div>\n        <div>\n          <img src={poster} alt=\"\" height=\"400px\" />\n        </div>\n        <h2>{title}</h2>\n        <h3>{year}</h3>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default MovieDisplay;\n","import React from \"react\";\nimport MovieDisplay from \"../movie-display/MovieDisplay\";\nimport \"./MovieList.css\";\n\nconst MovieList = ({ moviesArray }) => {\n  return (\n    <React.Fragment>\n      <div className=\"grid-container\">\n        {moviesArray.map(item => {\n          return (\n            <MovieDisplay\n              key={item.imdbID}\n              title={item.Title}\n              poster={item.Poster}\n              year={item.Year}\n            />\n          );\n        })}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default MovieList;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Title from \"../components/title/Title\";\nimport MovieList from \"../components/movie-list/MovieList\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nclass App extends Component {\n  state = {\n    input: \"\",\n    movies: [],\n    error: \"\"\n  };\n\n  onHandleChange = event => {\n    this.setState({ input: event.target.value });\n  };\n\n  onHandleSubmit = () => {\n    const { input } = this.state;\n    if (input.length > 0) {\n      fetch(`http://www.omdbapi.com/?s=${input}&apikey=${API_KEY}`)\n        .then(response => response.json())\n        .then(data =>\n          this.setState({\n            movies: data.Search\n          })\n        )\n        .catch(err => err);\n      this.setState({ input: \"\" });\n    } else {\n      this.setState({ error: \"Sorry!!!, Please enter a film name\" });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">MovieFinder</header>\n        <Title\n          input={this.state.input}\n          onHandleChange={this.onHandleChange}\n          onHandleSubmit={this.onHandleSubmit}\n        />\n        <MovieList moviesArray={this.state.movies} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./container/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}